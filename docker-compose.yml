version: "3.9"

services:
  mongo1:
    image: mongo:7
    container_name: mongo1
    restart: always
    volumes:
      - mongo1_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    command: ["--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongo2:
    image: mongo:7
    container_name: mongo2
    restart: always
    volumes:
      - mongo2_data:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongo3:
    image: mongo:7
    container_name: mongo3
    restart: always
    volumes:
      - mongo3_data:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build: ./backend
    container_name: backend
    restart: always
    ports:
      - "5000:5000"
    environment:
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/mydb?replicaSet=rs0
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  app-network:
    driver: bridge
